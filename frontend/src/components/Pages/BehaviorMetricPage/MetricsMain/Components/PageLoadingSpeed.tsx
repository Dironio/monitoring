import { useEffect, useState } from "react";
import { Line } from 'react-chartjs-2';
import { getAPI } from "../../../../utils/axiosGet";
import { useSiteContext } from "../../../../utils/SiteContext";

interface LoadingSpeedData {
    date: string;
    speed: number;
}

const PageLoadingSpeed: React.FC = () => {
    const [loadingSpeedData, setLoadingSpeedData] = useState<LoadingSpeedData[]>([]);
    const [averageSpeed, setAverageSpeed] = useState<number | null>(null);
    const [trend, setTrend] = useState<string | null>(null);
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);
    const { selectedSite, setSelectedSite } = useSiteContext();

    useEffect(() => {
        fetchLoadingSpeed();
    }, []);

    const fetchLoadingSpeed = async () => {
        try {
            setLoading(true);
            const response = await getAPI.get<LoadingSpeedData[]>(`/events/behavior/metrics/loading-speed?web_id=${selectedSite?.value}`);
            const data = response.data;

            if (!data || data.length === 0) {
                setError('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏.');
                setLoading(false);
                return;
            }

            setLoadingSpeedData(data);

            // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
            const avg = data.reduce((sum, item) => sum + item.speed, 0) / data.length;
            setAverageSpeed(Math.round(avg));

            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏
            if (data.length > 1) {
                const lastSpeed = data[data.length - 1].speed;
                const prevSpeed = data[data.length - 2].speed;
                setTrend(lastSpeed > prevSpeed ? '–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è üìà' : '–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —Å–Ω–∏–∂–∞–µ—Ç—Å—è üìâ');
            } else {
                setTrend('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞');
            }

            setLoading(false);
        } catch (err) {
            setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.');
            setLoading(false);
        }
    };

    const data = {
        labels: loadingSpeedData.map((item) => item.date),
        datasets: [
            {
                label: '–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ (–º—Å)',
                data: loadingSpeedData.map((item) => item.speed),
                borderColor: 'rgba(75, 192, 192, 1)',
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                fill: true,
                tension: 0.4,
            },
        ],
    };

    const options = {
        responsive: true,
        plugins: {
            legend: { display: false },
        },
        scales: {
            y: {
                beginAtZero: true,
                title: {
                    display: true,
                    text: '–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ (–º—Å)',
                },
            },
            x: {
                title: {
                    display: true,
                    text: '–î–∞—Ç–∞',
                },
            },
        },
    };

    return (
        <div className="metric-card">
            <h2>üìä –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</h2>

            {loading ? (
                <p className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
            ) : error ? (
                <p className="error">{error}</p>
            ) : (
                <>
                    <div className="metric-info">
                        <p>
                            <strong>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏:</strong> {averageSpeed} –º—Å
                        </p>
                        <p>
                            <strong>–¢–µ–Ω–¥–µ–Ω—Ü–∏—è:</strong> {trend}
                        </p>
                    </div>

                    <div className="chart-container">
                        <Line data={data} options={options} />
                    </div>
                </>
            )}
        </div>
    );
};

export default PageLoadingSpeed;